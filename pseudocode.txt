Pseudocode for Bag.java

1. Create a Bag class using generics (Bag<T>).
2. Internally use a HashMap<T, Integer> to store each item and the number of times it appears.

3. Method: add(item)
   - If the item exists in the map, increment its count.
   - Otherwise, add the item with count 1.

4. Method: remove(item)
   - If the item exists:
       - If its count is more than 1, decrement the count.
       - If its count is 1, remove the item from the map.
   - Return true if the item was removed, false otherwise.

5. Method: contains(item)
   - Return true if the item exists in the map.

6. Method: count(item)
   - Return the number of times the item appears, or 0 if it doesn’t exist.

7. Method: size()
   - Return the total number of items in the bag, including duplicates (sum of all counts).

8. Method: distinct()
   - Return a Set of all unique items in the bag (map keySet).

9. Method: merge(otherBag)
   - For each entry in the other bag:
       - Add its count to the current bag’s count for that item.

10. Method: toString()
    - If the bag is empty, return a message stating so.
    - Otherwise, return a string where each line shows an item and its count.

------------------------------------------------------------

Pseudocode for BagDemo.java

1. Create a Bag to represent votes in Region A.
2. Add several candidate IDs to Region A to simulate vote casting.
3. Print Region A's contents using toString().
4. Print the total number of votes and count for Candidate 101.

5. Create another Bag to represent votes in Region B.
6. Add different candidate IDs to Region B.
7. Print Region B's contents, total votes, and count for Candidate 104.

8. Merge Region B votes into Region A using the merge() method.
9. Print the combined vote totals from both regions.

10. Print the list of distinct candidates in the combined bag.

11. Remove all votes for Candidate 103 using a while-loop and the remove() method.

12. Print the updated vote count after Candidate 103 has been fully removed.
